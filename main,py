from pyrogram import Client
import asyncio
from datetime import datetime
from zoneinfo import ZoneInfo

# NOTE: For security, it is highly recommended to use environment variables
# instead of hardcoding sensitive data like API keys and phone numbers.

# Your credentials
api_id = 28190856
api_hash = "6b9b5309c2a211b526c6ddad6eabb521"
phone_number = "+989011243659"

# Initialize the Pyrogram client.
# The session name "my_account" will store your login details after the first run.
app = Client("my_account", api_id=api_id, api_hash=api_hash, phone_number=phone_number)

async def update_name():
    """Continuously updates the user's first name with the current time in Tehran."""
    
    # Define the time zone once
    tehran_timezone = ZoneInfo("Asia/Tehran")
    
    while True:
        # Get the current time in Tehran
        tehran_time = datetime.now(tehran_timezone)
        
        # Format the time as HH:MM
        current_time = tehran_time.strftime("%H:%M")
        
        # Calculate and format the UTC offset for logging and diagnosis
        offset = tehran_time.utcoffset()
        offset_str = f"{offset.total_seconds() / 3600:+.2f}h" # Should show +3.50h (UTC+3:30)
        
        # Combine the fixed name part with the live clock
        name_with_clock = f"𝓎𝑒 𝒶𝓂𝒾𝓇 {current_time}"
        
        try:
            # Update the profile (only the first_name is changed)
            await app.update_profile(first_name=name_with_clock)
            # Log the time and the calculated offset
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] Updated name to: {name_with_clock} (UTC Offset: {offset_str})")
            
        except Exception as e:
            # Handle potential rate limits or connection errors
            print(f"Error updating name: {e}")
            
        # Wait for 60 seconds before the next update to avoid hitting rate limits
        await asyncio.sleep(60)

async def main():
    """Starts the client and runs the name update loop."""
    print("Starting Telegram Client...")
    await app.start()
    print("Client running. Starting name update loop.")
    
    # Run the update function
    await update_name()
    
    # If the update_name loop somehow finishes (it shouldn't, due to 'while True'),
    # the client should be stopped.
    await app.stop()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nBot stopped by user.")
    except Exception as e:
        print(f"An unexpected error occurred in main execution: {e}")

from pyrogram import Client, filters # اضافه کردن filters برای فیلتر کردن پیام‌ها
import asyncio
from datetime import datetime
from zoneinfo import ZoneInfo
import random # وارد کردن ماژول random دیگر مورد نیاز نیست، اما فعلا نگه داشته شده است

# NOTE: For security, it is highly recommended to use environment variables
# instead of hardcoding sensitive data like API keys and phone numbers.

# Your credentials
api_id = 28190856
api_hash = "6b9b5309c2a211b526c6ddad6eabb521"
phone_number = "+989011243659"

# Initialize the Pyrogram client.
# The session name "my_account" will store your login details after the first run.
app = Client("my_account", api_id=api_id, api_hash=api_hash, phone_number=phone_number)

# تعریف منطقه زمانی تهران با استفاده از ماژول استاندارد
TEHRAN_TIMEZONE = ZoneInfo("Asia/Tehran")

# --- تنظیمات پاسخ خودکار (Auto-Reply) ---
# فقط یک پیام ثابت برای ارسال در زمان آفلاین بودن
# متن جدید مورد نظر شما
AUTO_REPLY_TEXT = "سلام، آنلاین نیستم. پیام شما را دریافت کردم. در حال حاضر خارج از دسترس هستم، اما در اولین فرصت ممکن، پاسخ خواهم داد."


def stylize_time(time_str: str) -> str:
    """
    تبدیل ارقام ساعت به فونت شیک Math Monospace برای هماهنگی با اسم (قلم کوچک و خاص).
    ارقام استفاده شده: 𝟶, 𝟷, 𝟸, 𝟹, 𝟺, 𝟻, 𝼆, 𝟽, 𝟾, 𝟿
    """
    conversion_map = {
        '0': '𝟶', '1': '𝟷', '2': '𝟸', '3': '𝟹', '4': '𝟺',
        '5': '𝟻', '6': '𝼆', '7': '𝟽', '8': '𝟾', '9': '𝟿',
        ':': ':' # کولون را استاندارد نگه می‌داریم
    }
    return ''.join(conversion_map.get(char, char) for char in time_str)

async def update_name():
    """
    ساعت و دقیقه فعلی تهران را با همگام‌سازی دقیق به عنوان نام کاربر به‌روزرسانی می‌کند.
    """
    
    while True:
        # 1. گرفتن ساعت فعلی ایران از طریق ماژول استاندارد (ZoneInfo)
        tehran_time = datetime.now(TEHRAN_TIMEZONE)
        
        # 2. فرمت جدید: نمایش فقط ساعت (HH:MM)
        current_time_str = tehran_time.strftime("%H:%M")
        
        # 3. تبدیل به فونت شیک
        stylized_time_str = stylize_time(current_time_str)
        
        # ترکیب: حذف تاریخ و خط جداکننده (فقط اسم و ساعت)
        name_with_clock = f"𝓎𝑒 𝒶𝓂𝒾𝓇 {stylized_time_str}"
        
        try:
            # Update the profile (only the first_name is changed)
            await app.update_profile(first_name=name_with_clock)
            # Log the time being set
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] Updated name to: {name_with_clock}")
            
        except Exception as e:
            # Handle potential rate limits or connection errors
            print(f"Error updating name: {e}")
            
        # --- منطق همگام‌سازی (Synchronization Logic) برای رفع تاخیر یک دقیقه ---
        # محاسبه دقیق ثانیه‌های باقی‌مانده تا شروع دقیقه بعدی
        now = datetime.now()
        # مقدار ثانیه‌های گذشته از دقیقه فعلی + کسری از ثانیه
        seconds_into_minute = now.second + now.microsecond / 1_000_000
        # محاسبه زمانی که باید صبر کنیم تا دقیقه بعدی شروع شود
        sleep_seconds = 60 - seconds_into_minute
        
        # حداقل زمان خواب 1 ثانیه، اگر اختلاف کمتر از 1 ثانیه بود، به دقیقه بعدی می‌رویم
        if sleep_seconds < 0.5:
             sleep_seconds += 60 # اگر نزدیک به شروع دقیقه هستیم، تا دقیقه بعد صبر کن

        await asyncio.sleep(sleep_seconds)

# --- تابع جدید برای پاسخ خودکار ---
# @app.on_message این دکوراتور تضمین می‌کند که این تابع به محض دریافت پیام اجرا می‌شود
# filters.private() فیلتر می‌کند تا فقط پیام‌های خصوصی (PM) را شامل شود
@app.on_message(filters.private & ~filters.me)
async def auto_reply(_, message):
    # بررسی کنید که آیا شما (سلف‌بات) آخرین پیام را در این چت ارسال نکرده‌اید.
    # این کار از ارسال پاسخ‌های مکرر در یک چت جلوگیری می‌کند.
    if not message.from_user.is_self:
        # استفاده مستقیم از متن ثابت جدید
        reply_text = AUTO_REPLY_TEXT
        
        try:
            # ارسال پیام پاسخ به چتی که پیام از آن آمده است
            await message.reply_text(reply_text)
            print(f"Auto-reply sent to {message.chat.id}: {reply_text[:20]}...")
            
        except Exception as e:
            print(f"Error sending auto-reply: {e}")


async def main():
    """Starts the client and runs the name update loop."""
    print("Starting Telegram Client...")
    
    # اجرای client (لاگین)
    await app.start()
    print("Client running. Starting name update and auto-reply listeners.")
    
    # اجرای تابع به‌روزرسانی نام در پس‌زمینه (Concurrent)
    # توجه: on_message() به صورت خودکار توسط Pyrogram مدیریت می‌شود
    await update_name()
    
    # اگر update_name() کامل شد، client را متوقف کن
    await app.stop()

if __name__ == "__main__":
    try:
        # Pyrogram همه کارها را به صورت asynchronous مدیریت می‌کند
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nBot stopped by user.")
    except Exception as e:
        print(f"An unexpected error occurred in main execution: {e}")
